name: Version Bump

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'

permissions:
  contents: write
  pull-requests: write

jobs:
  version-bump:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get latest tag
        id: get_tag
        run: |
          # Check if any tags exist
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            LATEST_TAG=$(git describe --tags --abbrev=0)
            echo "has_tags=true" >> $GITHUB_OUTPUT
            echo "Latest tag: $LATEST_TAG"
          else
            LATEST_TAG="v0.0.0"
            echo "has_tags=false" >> $GITHUB_OUTPUT
            echo "No tags found, starting from v0.0.0"
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Analyze commits since last tag
        id: analyze_commits
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          HAS_TAGS="${{ steps.get_tag.outputs.has_tags }}"
          
          # Get commits since the last tag (or all commits if no tags exist)
          if [ "$HAS_TAGS" = "true" ]; then
            COMMITS=$(git log ${LATEST_TAG}..HEAD --oneline --pretty=format:"%s")
          else
            COMMITS=$(git log --oneline --pretty=format:"%s")
          fi
          
          if [ "$HAS_TAGS" = "true" ]; then
            echo "Commits since $LATEST_TAG:"
          else
            echo "All commits (no previous tags):"
          fi
          echo "$COMMITS"
          
          # Determine version bump type based on conventional commits
          MAJOR_BUMP=false
          MINOR_BUMP=false
          PATCH_BUMP=false
          
          # Check for breaking changes (major version bump)
          if echo "$COMMITS" | grep -qE "^(feat|fix|perf|refactor)(\(.+\))?!:|BREAKING CHANGE:"; then
            MAJOR_BUMP=true
            echo "Breaking change detected - major version bump"
          # Check for new features (minor version bump)
          elif echo "$COMMITS" | grep -qE "^feat(\(.+\))?:"; then
            MINOR_BUMP=true
            echo "New feature detected - minor version bump"
          # Check for bug fixes, patches, or other changes (patch version bump)
          elif echo "$COMMITS" | grep -qE "^(fix|perf|refactor|docs|style|test|chore|ci|build)(\(.+\))?:"; then
            PATCH_BUMP=true
            echo "Bug fix or patch detected - patch version bump"
          else
            echo "No conventional commits found - skipping version bump"
            echo "skip_bump=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "major_bump=$MAJOR_BUMP" >> $GITHUB_OUTPUT
          echo "minor_bump=$MINOR_BUMP" >> $GITHUB_OUTPUT
          echo "patch_bump=$PATCH_BUMP" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: calculate_version
        if: steps.analyze_commits.outputs.skip_bump != 'true'
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          
          # Extract version numbers (remove 'v' prefix)
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Increment version based on bump type
          if [ "${{ steps.analyze_commits.outputs.major_bump }}" = "true" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "${{ steps.analyze_commits.outputs.minor_bump }}" = "true" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "${{ steps.analyze_commits.outputs.patch_bump }}" = "true" ]; then
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Create and push tag
        if: steps.analyze_commits.outputs.skip_bump != 'true'
        run: |
          NEW_VERSION="${{ steps.calculate_version.outputs.new_version }}"
          
          # Create the tag
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          
          # Push the tag
          git push origin "$NEW_VERSION"
          
          echo "Created and pushed tag: $NEW_VERSION"

      - name: Create Release
        if: steps.analyze_commits.outputs.skip_bump != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.calculate_version.outputs.new_version }}
          release_name: Release ${{ steps.calculate_version.outputs.new_version }}
          body: |
            ## Changes in this release
            
            ### Commits since ${{ steps.get_tag.outputs.latest_tag }}:
            ```bash
            ${{ steps.analyze_commits.outputs.commits }}
            ```
            
            ### Version Bump Type
            ${{ steps.analyze_commits.outputs.major_bump == 'true' && 'Major (breaking changes)' || steps.analyze_commits.outputs.minor_bump == 'true' && 'Minor (new features)' || 'Patch (bug fixes and improvements)' }}
          draft: false
          prerelease: false
